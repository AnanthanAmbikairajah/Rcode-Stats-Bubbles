\documentclass[10pt]{beamer}%
\usetheme{Boadilla}
\usecolortheme{seahorse}

\usepackage[utf8]{inputenc}%

% graphics
%% Figures %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\usepackage{graphicx}
\usepackage{xcolor}%for color mixing

\usepackage{amsmath}%
\usepackage{amsfonts}%
\usepackage{amssymb}%
\usepackage{graphicx}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%% Doc info %%%%%%%%%%%%%%%%%%%
\title[\textbf{Intro to R}]{Introduction to R}
\date{\today}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{document}

<<Plot Options, echo=FALSE, message=FALSE>>=
#load(file = ".RData")
opts_knit$set(width=60)
opts_chunk$set(comment=NA, fig.width=8, fig.height=6, out.width='0.8\\textwidth',
               out.height='0.6\\textwidth',background='#D7DDEB')


szgr <- 2
szax <- 1.3
marr <- c(4, 4, 1, 1) + 0.1
setPar<-function(){
par(las=1,mar=marr, cex=szgr, cex.lab=szax , cex.axis=szax, lwd=2 ,pch=1, las=1)
}
setPar()
@

\begin{frame}
\maketitle	
\end{frame}
%%%%%%%%%%%

\begin{frame}{R and RStudio}
  \begin{center}
    \includegraphics[width=0.8\textwidth]{Figures/rstudiolayout}
  \end{center}
\end{frame}
%%%%%%%%%%%

\begin{frame}{What R can do}

  \pause \begin{exampleblock}{Everything.$^{1,2}$}
    
  {\tiny $1$ Except think about your science}\\
  {\tiny $2$ Occasionally in a non efficient way}
  \end{exampleblock}
  
  \pause \begin{block}{What about RStudio?}
  Make your life easier\\
  Many handy tricks.
  \end{block}
\end{frame}
%%%%%%%%%%%

\AtBeginSection[]
{
  \begin{frame}<beamer>
    \frametitle{}
    \tableofcontents[currentsection,hideothersubsections,subsectionstyle=hide]% down vote\tableofcontents[currentsection,currentsubsection,hideothersubsections,sectionstyle=show/hide,subsectionstyle=show/shaded/hide] 
  \end{frame}
} 
\section{The mean}

\begin{frame}[fragile]{Calculating a mean: Arithmetic and assignment}

<<>>=
  (2 + 3 + 5 + 1) / 4
@
\pause
<<>>=
  a <- 2
  b <- 3
  c <- 5
  d <- 1
  
  (a + b + c + d) / 4
@
\pause
<<>>=
  a <- 45
  (a + b + c + d) / 4
@
\end{frame}
%%%%%%%%%%%


\begin{frame}[fragile]{Calculating a mean: using vectors} % tiring to type again and again
  <<>>=
  c(2,3,5,1) # c is for concatenate
  @
  \pause
  <<>>=
  mydata <- c(2,3,5,1) # save the vector
  @
  \pause
  
  <<>>=
   mydata <- (2,3,5,1) # c is missing => error!
  @
  
  \pause
  
  Why bother with vectors?
  <<>>=
    mydata[2] <- 4
    mydata
  @
\end{frame}
%%%%%%%%%%%

\begin{frame}[fragile]{Calculating a mean: using functions}%shortcut
  
  How to use a function?
  <<>>=
    ?mean  
  @
  
\pause

  <<>>=
  mean(c(2,4,5,1))
  mean(mydata)
  
  mean(x = mydata)
  @
  

\end{frame}
%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Data-frames}

\begin{frame}[fragile]{Loading data}
  
  <<>>=
    data("trees")
  @
  \pause
  
  <<>>=
  str(trees)
  @
  
  Try also \texttt{summary}, \texttt{class}, \texttt{head}, \texttt{tail}
\end{frame}
%%%%%%%%%%%

\begin{frame}[fragile]{Access}
  
  \begin{block}{Bracket-syntax}
    \begin{itemize}
      \item Row: dataframe[row, ]
      \item Column: dataframe[ , column]
      \item Element: dataframe[row, column]
    \end{itemize}
  \end{block}
  
  \pause
  <<eval=FALSE>>=
  trees[,1]
  trees[1:8,]
  trees[c(2,1,2), 3]
  trees[, "Height"]
  @
  
  \begin{block}{Dollar-syntax}
    \begin{itemize}
      \item Column \verb+ dataframe$column_name +
      \item Element \verb+ dataframe$column_name[row] +
    \end{itemize}
  \end{block}
  
  <<eval=FALSE>>=
    trees$Height
  @
\end{frame}
%%%%%%%%%%%

\begin{frame}[fragile]{Finally time to think a tiny bit!}
  \begin{center}
    \includegraphics[width=0.3\textwidth]{Figures/brain}
  \end{center}
\centering
  \textbf{Calculate the mean for all three variables in trees,\\ excluding the last (31st) record.}
  
\end{frame}
%%%%%%%%%%%

\begin{frame}[fragile]{How to get the row means?}
  <<eval=FALSE>>=
  mean(trees[1,])
  mean(trees[2,])
  mean(trees[...,])
  @
  \pause
  \begin{center}:
    \includegraphics[width=0.4\textwidth]{Figures/ineff}
  \end{center}
\end{frame}
%%%%%%%%%%%

\begin{frame}[fragile]{How to get the row means? For-loops}

  <<eval = FALSE>>=
    for (i in 1:N)
    {
      something as a function of i
    }
  @
  
  \pause
    <<eval = FALSE>>=
    ResultMean <- vector() # we will store the results there
    for (i in 1:31)
    {
      ResultMean[i] <- mean(as.numeric(trees[i,]))
    }
  @
  
\end{frame}
%%%%%%%%%%%

\begin{frame}[fragile]{For-loops: your turn!}

Load Sunspots data.
  <<>>=
    data("rock")
  @
  
  \centering
\textbf{\large Use a for loop to obtain column averages}
  
\end{frame}
%%%%%%%%%%%

\begin{frame}[fragile]{More concise alternative: apply functions}

  <<eval=FALSE>>=
  apply(X = dataframe, MARGIN = 1 (row) or 2 (col), FUN = function)
  @
  
  \pause
  
  <<eval=FALSE>>=
  apply(X = rock, MARGIN = 1, FUN = mean)#by row (not meaningful)
  apply(X = rock, MARGIN = 2, FUN = mean)#by column
  @
\end{frame}
%%%%%%%%%%%
\begin{frame}[fragile]{Even better (worse)...}

  <<eval=FALSE>>=
    colMeans(rock)  
    rowMeans(rock)
  @
  
  \pause
  
  \begin{alertblock}{Trade-off concision  / flexibility}
    \begin{itemize}
      \item colMeans shortest, but does only means
      \item apply very flexible, but does only array/matrix/data-frame
      \item for-loop looks complex, but infinitely flexible
      \item (NB: your computer does a for-loop whether you see it or not)
    \end{itemize}
  \end{alertblock}
  
\end{frame}
%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{Visualisation}

\begin{frame}[fragile]{plot function}

<<plorock>>=
plot(rock)
@

\end{frame}
%%%%%%%%%%%

\begin{frame}[fragile]{plot function}

<<plorock2>>=
plot(rock$peri)
@

\end{frame}
%%%%%%%%%%%

\begin{frame}[fragile]{plot function}

<<plorock3>>=
plot(x = rock$peri, y = rock$area)
@

\end{frame}
%%%%%%%%%%%

\begin{frame}[fragile]{plot function}

<<plorock4>>=
plot(x = rock$peri, y = rock$area, main = "Eureka!", 
     xlab = "Perimeter", ylab = "area", col="blue", pch=2)
@
\end{frame}
%%%%%%%%%%%

\begin{frame}[fragile]{plot function: back to the mean}
  <<>>=
  data("iris")  
  @
\end{frame}
%%%%%%%%%%%

\begin{frame}[fragile]{plot function: back to the mean}
<<iris1>>=
plot(iris$Sepal.Length, col=iris$Species)
@
\end{frame}
%%%%%%%%%%%

\begin{frame}[fragile]{boxplots}
  <<plorock5>>=
  boxplot(iris$Sepal.Length ~ iris$Species)
  #or plot(iris$Sepal.Length ~ iris$Species)
@

\end{frame}
%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{T-test}

\begin{frame}[fragile]{Student's T.test introduction}% presenting the test, the output...
  <<>>=
  ?t.test
  @
  
  \pause
  <<>>=
  t.test(1:10, y = c(7:20))
  @
  
\end{frame}
%%%%%%%%%%%

\begin{frame}[fragile]{T.test introduction}% presenting the test, the output...

  <<>>=
    boxplot(c(1:10, 7:20) ~ c(rep(1,10), rep(2, 14)))
  @
\end{frame}
%%%%%%%%%%%

\begin{frame}[fragile]{Are irises different?}

  \textbf{Use t-tests to compare species in the iris dataset}
  
  \begin{center}
    \includegraphics[height=0.6\textwidth]{Figures/iris}
  \end{center}
\end{frame}
%%%%%%%%%%%

\section{Open problem}

\begin{frame}[fragile]{The t.test problem}
  
  <<>>=
  t.test(1:10, y = c(2:20,-9), var.equal = FALSE)
  @
\end{frame}
%%%%%%%%%%%

\begin{frame}[fragile]{The t.test problem}
  <<>>=
  t.test(1:10, y = c(2:20,-9), var.equal = TRUE)
  @
 
\end{frame}
%%%%%%%%%%%

\begin{frame}[fragile]{The t.test problem}
  Random sample from a Gaussian distribution with variance 1
  <<>>=
    set.seed(seed = 179)
    x1 <- rnorm(n = 20, mean = 0, sd = 1)
    x2 <- rnorm(n = 20, mean = 0, sd = 1)
    

    var(x1)
    var(x2)
  @
\end{frame}
%%%%%%%%%%%

\begin{frame}[fragile]{The t.test problem}
  <<>>=
    var.test(x = x1, y = x2)
  @
  \textbf{Should we use var.equal = TRUE or FALSE ?\\}
  
  \textbf{When var.test significant/not?}
\end{frame}
%%%%%%%%%%%

\begin{frame}{}

\end{frame}
%%%%%%%%%%%
\begin{frame}{Bonus open problems if you get bored}
  \begin{enumerate}
    \item What is the fastest way to get row averages in a data-frame?
    \item Create a function called colVars, like colMeans but for variance
    \item Create nice plots to visualize iris data (ideally journal-quality)
  \end{enumerate}
  
\end{frame}
%%%%%%%%%%%  
\end{document}