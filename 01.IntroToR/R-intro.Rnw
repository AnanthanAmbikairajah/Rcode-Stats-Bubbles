\documentclass[12pt,a4paper]{scrartcl}
\usepackage[utf8]{inputenc}
\usepackage{amsmath}
\usepackage{graphicx}
\usepackage{tikz}
%\usepackage{silence}
\usepackage{mdframed}
%\WarningFilter{mdframed}{You got a bad break}
\usepackage[colorinlistoftodos]{todonotes}
\usepackage{listings}
\usepackage{color}
\colorlet{exampcol}{blue!10}
\usepackage{multicol}
\usepackage{booktabs}

\usepackage[autostyle, english = american]{csquotes}
\MakeOuterQuote{"}

\usepackage{hyperref}
\hypersetup{
    colorlinks,
    citecolor=black,
    filecolor=black,
    linkcolor=blue,
    urlcolor=black
}

\title{A minimalist introduction to R}
\date{\today}
\author{Timoth√©e Bonnet\\ (thanks to Koen van Benthem and Ashley Latimer for help)}

\begin{document}


\maketitle

\tableofcontents

<<ksetup, cache=FALSE, include=FALSE>>=
opts_chunk$set(dev="tikz",tidy=F,dev.args=list(pointsize=12))
options(width=60)
opts_chunk$set(background='#D7DDEB')

@

\vspace{2cm}
\begin{mdframed}
\textit{There are many ways to achieve the same goal in \texttt{R}, and we do not claim to teach you the most efficient way to use \texttt{R}. You may find more elegant ways! \\[1.5ex] 
Do try to understand exactly what the code and the functions we use do. The best way to learn how functions work is by either using the \texttt{R}-manual (type \texttt{?functionname} or use the RStudio Help tab by clicking on it or pressing F1) or by creating dummy data (just make up a small amount of data yourself, using \texttt{R} if possible!) and observe what the function does with these data.}
\end{mdframed}
\newpage

\section*{How this document works}
%This is a \texttt{knitr} document, which knits \texttt{R} code and output within a \LaTeX document.
R code and output are within boxes with a gray background. Comments within the R code start with a \# symbol; lines with R-outputs start with \#\#.

There are a few small exercises in each section. If you encounter any difficulty with them, ask me for help before the workshop (for instance just before, I will be in the room 30 minutes early).

Now, let the fun begin.

\section{Trash your calculator}
\subsection{Operators}
\texttt{R} can be used as a calculator, and a far more powerful one that any physical calculator. If you use your calculator to enter numbers in \texttt{R}, you are being inefficient.

Below we demonstrate the use of some basic mathematical operators:
<<mathope>>=
1+3 #addition
5-2 #substraction
6*4 #multiplication
14/2 #division
2^3 #exponent
2**3 #other version for exponent
@

There are many mathematical functions already present in R:
<<mathfun>>=
exp(3) #exponential
log(2.71) #logarithm
sqrt(9) #square root
9 ^ (1/2) # other version for square root

#trigonometric functions :
#(use ";" for several expressions on the same line)
sin(pi/2); cos(1); tan(pi/3) 
@

\begin{mdframed}
\textbf{Small exercise}\\
Use R to compute:
$$
  y = (\cos (0.1\pi))^3
$$
You should get \Sexpr{cos(0.1*pi) ^ 3}

And:
$$
  y = \log (3-2) + 5
$$
You should get \Sexpr{log(3-2) +5}

And if you dare:
$$
  y = \frac{1}{2\sqrt{2\pi}} e^{\frac{-1}{2} (\frac{3-\pi}{2})^2}
$$

You should get \Sexpr{(1/(2*sqrt(2*pi))) * exp((-1/2)*((3-pi)/2)^2)}

\end{mdframed}

Logical operators are very important for programming and scripting.
You can test whether two things are equal with double = signs:
<<logop>>=
3 == 6/2 #is 3 equal to 6/2? TRUE!
3 == pi  # FALSE!
@

You can also test if they are NOT equal with the operator \texttt{!=}:
<<>>=
2 != 3
2 != 2
@

The \texttt{!} symbol means "not" in general, so you can use it to get the opposite result:
<<>>=
!TRUE
!FALSE
@

The AND operator is \texttt{\&}
<<>>=
2 == 2 & 3==3
2 ==2 & 3==2
@

The OR operator is \texttt{\textbar}
<<>>=
2 == 2 | 3==2
2 == 4 | 3==2
@

\begin{mdframed}
\textbf{Small exercise}\\
Try and guess the result of these logical tests before running them:
<<eval=FALSE>>=
! 1==2
(1!=2 | 3==4) & (2==4/2)
"abc" != "bc" 
@
\end{mdframed}

\subsection{Assignment}
Values can be assigned to objects to store them and make your code flexible. You assign a value to an object using the operator \verb+ <- + (or \verb+ = +, but be careful not to confuse this with the \verb+ == + used in tests).

<<>>=
#You can use objects in calculation
a <- 12
a + 2

# you can assign an object value to another object
b <- a
c <- a*b

# you can re-assign an object
a <- "c"
b <- "c"
a == b
c <- a == "b"
c
@

\section{No need to write it on paper: Containers}
A container is some kind of object that can store values, like numbers, characters, booleans (TRUE/FALSE)...
We will present vectors, matrices and data-frames. 

\subsection{Vectors}
The simplest container is a vector.
A flexible way to create a vector by \textit{concatenating} several values with the syntax \verb+ c(x,y,...)+.

<<>>=
a <- c(3,9,3,5) # c is for concatenate
a
@

You can now do calculations on your vector:

<<>>=
a * 2
@

You can access one or several elements in the vector using squared brackets
<<>>=
#access one value
a[1]
a[2]

#access multiple values by concatenating locations
a[c(1,3)]

#access mutiple successive values
a[2:4]#the syntax x:y means "all integers between x and y"

#modify a value
a[3] <- -5
a

#modify mutiple values
a[1:2] <- 1
a
@

\subsection{Matrix}
A matrix is similar to a vector, but in two dimensions.
You can create one with the function \texttt{matrix()}.

For instance:
<<>>=
a <- matrix(data = c(1,2,3,4), nrow = 2) #fills columns before rows
a

#if you want to fill rows before columns:
matrix(data = c(1,2,3,4), nrow = 2, byrow = TRUE)
@

You can access the cell in the row $i$ of the column $j$ using squared brackets like for vectors, but since there are two dimensions rather than one, you may give two numbers: \texttt{a[i,j]}.

<<>>=
#extracting the element in the first row of the second column:
a[1,2]

# extracting all of the second row:
a[2,]

# changing all of the first column:
a[,1] <- 29
a
@

That is all for now. If you want to learn more, check the help for this function, using:
<<eval=FALSE>>=
?matrix
@

\subsection{Data-frame}
Data-frames are similar to matrices, but are much more flexible: they can store different data types and their elements can be accessed in more efficient ways.

\textbf{R is probably most efficient and user-friendly when analyses rely on data-frames.}


<<>>=
plant_data <- data.frame(plant = c("potatoes", "hemlock", "carrot"),
                         number= c(3,5,39), danger= c(FALSE,TRUE,FALSE),
                         stringsAsFactors = FALSE)

plant_data
@

You can access and modify elements in the same way as for matrices:
<<>>=
plant_data[3,2] #first number is for row, second for column
plant_data[3,] #get all columns for the third row
@

But you can also use column names, which are more human-friendly than numbers:
<<>>=
plant_data[1,"plant"] # first row of column named "plant"

plant_data[,"danger"] # all of "danger" column
@

In some case it is easier to work with a different syntax using the dollar sign. Below, we access the same elements using this alternative syntax:

<<>>=
plant_data$plant[1]

plant_data$danger
@

It is very easy to create new columns, with one or the other syntax:

<<>>=
plant_data[,"tasty"] <- c(TRUE, NA, TRUE) #NA (Not Applicable) indicates missing value

plant_data$color <- c("variable", "green", "orange")

plant_data
@

You can also add new entries (rows):
<<>>=
plant_data[4,] <- c("eucalyptus", 24, NA, FALSE, "green")
plant_data
@


\begin{mdframed}
\textbf{Small exercise}\\
Imagine you are a koala. Change the information about eucalyptus tastiness in the data-frame \verb+plant_data+ (yes, you will need to create this data-frame using the code above if you haven't done that already.)

\end{mdframed}

\subsection{What is this object again?}

If you don't remember what your object is, or what it contains, you can use the function \texttt{str}:
<<>>=
str(plant_data)# a data.frame
str(a) # a num(eric vector)
@

That works not only for containers, but for any R object:
<<>>=
str(1) #num(eric)
str(TRUE) # logi(cal)
str("banana") #chr (character string)
str(exp) # a function taking one parameter...
@

\section{For loops}
Loops are a way to automatize repetitive tasks. 

To demonstrate this, let's load some data that are buit-in R:
<<>>=
data(volcano)
str(volcano)
@
The function \texttt{str} tells us that the object volcano is a numeric object, with two dimensions, a.k.a. a matrix, and that this matrix has 87 rows and 61 columns.

We can have a look at the first rows of the matrix with the function \texttt{head}:
<<>>=
head(volcano)#shows the first rows of the matrix
@

\texttt{volcano} contains topographic information for the Maunga Whau volcano.

You can visualize it with:
<<imvol>>=
image(volcano) #a volcano indeed!
@

Now, let's pretend we want the average elevation for every column.

We can use the function \texttt{mean()} to calculate the average of the first column, remembering how to access a column in a matrix:
<<>>=
mean( volcano[,1] )
@

We could change 1 to 2, then 3, then 4... until 61, and run 61 R-commands, but that is horribly inefficient. 
That is where a for-loop may be useful. Instead of writing code for the column "1" or "2"..."61",  we will write code for column "i", where "i" varies between 1 and 61: \texttt{mean( volcano[,i] )}.

Now, R doesn't know yet what "i" is, and would return an error message if you run this:

<<>>=
mean( volcano[,i] )
@

We need to include our code within a for-loop defining "i":

<<eval=FALSE>>=
for (i in 1:61)
{
  ...
}
@

The above code can be read as: "Define a variable i that will take integer values between 1 and 61, and do whatever is withing curly brackets for each value of i. "

If we run this:
<<>>=
for (i in 1:61)
{
  mean( volcano[,i] )
}
@
it looks like nothing happened. Actually, R did compute all the averages, but we didn't ask R to print the results or store them somewhere, so the loop was useless. 

We can print the results using the function \texttt{print()}:
<<>>=
for (i in 1:61)
{
  print(mean( volcano[,i] ))
}
@

Even better, we can store the results in a vector that we create before the loop:

<<>>=
averages <- vector(length = 61)

for (i in 1:61)
{
  averages[i] <- mean( volcano[,i] )
}

averages
@


Finally, we can make the code more robust and reproducible by calculating the number of columns in the data instead of assuming it is always going to be 61. For that, we use the function \texttt{ncol()} that simply returns the number of columns in a data-frame or a matrix:

<<>>=
averages <- vector(length = ncol(volcano))

for (i in 1:ncol(volcano))
{
  averages[i] <- mean( volcano[,i] )
}
@

\begin{mdframed}
\textbf{Small exercise}\\
Make a for-loop that calculate the variance for each row of volcano. You will probably want to use the function \texttt{var()} and the function \texttt{nrow()}.

\end{mdframed}

\begin{mdframed}
NB: here you do not really need a for loop. R has shorter, more efficient alternatives (we will talk about them later), but I believe it is crucial to master for loops which are much more flexible and transparent than alternatives.
\end{mdframed}

\section{Simple Graphics}

You can create graphics with various functions, the most fundamental one being \texttt{plot()}.
For instance:

<<plot1, fig.height=4, fig.width=6>>=
plot(x = c(1,2,3,4), y=c(0,0.2,0.4,0.5))
@

(the graph should appear when you run this line)


That's rather ugly, and we will learn how to make beautiful graphes in efficient ways. For now, let's just tweak a few things to demonstrate the use of options within the plot function:

<<plot2, fig.height=4, fig.width=6>>=
plot(x = c(1,2,3,4), y=c(0,0.2,0.4,0.5), type = "b",
     main = "Important result", xlab = "Cause", 
     ylab = "Consequence", xlim = c(0,4), col="red")
@

\begin{mdframed}
\textbf{Small exercise}\\
Modify the code above to obtain a graph with a y-axis that goes up to 1 (maybe what we are measuring on the y-axis is a proportion, so it seem fair to show the axis from 0 to 1), with the data being represented by a line only (without the dots), plotted in blue instead of red. You may want to check the help page for plot, type \texttt{?plot} (or search plot in the RStudio Help tab).
\end{mdframed}

\end{document}