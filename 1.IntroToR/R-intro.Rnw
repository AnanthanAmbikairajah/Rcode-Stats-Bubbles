\documentclass[12pt,a4paper]{scrartcl}
\usepackage[utf8]{inputenc}
\usepackage{amsmath}
\usepackage{graphicx}
\usepackage{tikz}
%\usepackage{silence}
\usepackage{mdframed}
%\WarningFilter{mdframed}{You got a bad break}
\usepackage[colorinlistoftodos]{todonotes}
\usepackage{listings}
\usepackage{color}
\colorlet{exampcol}{blue!10}
\usepackage{multicol}
\usepackage{booktabs}

\usepackage{hyperref}

\title{A minimalist introduction to R}
\date{\today}
\author{Timoth√©e Bonnet \& al.}

\begin{document}


\maketitle

\tableofcontents

<<ksetup, cache=FALSE, include=FALSE>>=
opts_chunk$set(dev="tikz",tidy=F,dev.args=list(pointsize=12))
options(width=60)
@

\vspace{2cm}
\begin{mdframed}
\textit{There are many ways to achieve the same goal in \texttt{R}, and we do not claim to teach you the most efficient way to use \texttt{R}. You may find more elegant ways! \\[1.5ex] 
Do try to understand exactly what the code and the functions we use do. The best way to learn how functions work is by either using the \texttt{R}-manual (type \texttt{?functionname} or use the RStudio Help tab by clicking on it or pressing F1) or by creating dummy data (just make up a small amount of data yourself, using \texttt{R} if possible!) and analyse what the function does to this data.}
\end{mdframed}
\newpage

\section*{How this document works}
%This is a \texttt{knitr} document, which knits \texttt{R} code and output within a \LaTeX document.
R code and output is generally contained within boxes with a gray background. Comments within the R code start with a \# symbol; lines with R-outputs start with \#\#.

All the files necessary to go through the workshop are (or should be!) in the folder of a github repository. We recommend you copy these files, or fork the repository if you are a git user.

Now, let's the fun begin.

\section{Trash your calculator}
\subsection{Operators}
\texttt{R} can be used as a calculator, and a far more powerful one that any physical calculator. If you use your calculator to enter numbers in \texttt{R}, you are being inefficient.

Below we demonstrate the use of some basic mathematical operators:
<<mathope>>=
1+3 #addition
5-2 #substraction
6*4 #multiplication
14/2 #division
2^3 #exponent
2**3 #or equivalently
@

There are many mathematical functions already present in R:
<<mathfun>>=
exp(3) #exponential
log(2.71) #logarithm
sqrt(9) #square root, which of course you can also write as:
9 ^ (1/2)
sin(pi/2); cos(1); tan(pi/3) #trigonometric functions
@

\begin{mdframed}
\textbf{Small exercise}\\
Use R to compute
$$
  y = \frac{1}{2\sqrt{2\pi}} e^{\frac{-1}{2} (\frac{3-\pi}{2})^2}
$$

<<echo=FALSE, eval=FALSE>>=
(1/(2*sqrt(2*pi))) * exp((-1/2)*((3-pi)/2)^2)
@

\end{mdframed}

Logical operators are very important for programming and scripting.
You can test whether two things are equal with double = signs:
<<logop>>=
3 == 6/2 #is 3 equal to 6/2? TRUE!
3 == pi  # FALSE!
@

You can also test if they are NOT equal with the operator \texttt{!=}:
<<>>=
2 != 3
2 != 2
@

The AND operator is \texttt{\&}
<<>>=
2 == 2 & 3==3
2 ==2 & 3==2
@

The OR operator is \texttt{\textbar}
<<>>=
2 == 2 | 3==2
2 == 4 | 3==2
@

\begin{mdframed}
\textbf{Small exercise}\\
Try and guess the result of these logical tests before running them:
<<eval=FALSE>>=
! 1==2
(1!=2 | 3==4) & (2==4/2)
"abc" != "bc" 
@
\end{mdframed}

\subsection{Assignment}
Values can be assigned to objects to store them and make your code flexible. You assign a value to an object using the operator \verb+ <- + (or \verb+ = +, but be careful not to confuse this with the \verb+ == + used in tests).

<<>>=
#You can use objects in calculation
a <- 12
a + 2

# you can assign an object value to another object
b <- a
c <- a*b

# you can re-assign an object
a <- "c"
b <- "c"
a == b
c <- a == "b"
c
@

\section{Containers}
A container is some kind of object that can contain several values.

\subsection{Vectors}
The simplest container is a vector.
A flexible way to create a vector by \textit{concatenating} several values with the syntax \verb+ c(x,y,...)+.

<<>>=
a <- c(3,9,3,5)
a
@

You can now do calculations on your vector:

<<>>=
a * 2
@

You can access one or several elements in the vector using squared brackets
<<>>=
#access one value
a[1]
a[2]

#access multiple values by concatenating locations
a[c(1,3)]

#access mutiple successive values
a[2:4]#the syntax x:y means "all integers between x and y"

#modify a value
a[3] <- -5
a

#modify mutiple values
a[1:2] <- 1
a
@

\subsection{Matrix}
A matrix is similar to a vector, but in two dimensions.
You can create one with the function \texttt{matrix()}.

For instance:
<<>>=
a <- matrix(data = c(1,2,3,4), nrow = 2)
a
@

You can access the cell in the row $i$ of the column $j$ using squared brackets like for vectors, but since there are two dimensions rather than one, you may give two numbers: \texttt{a[i,j]}.

<<>>=
#extracting the element in the first row of the second column:
a[1,2]

# extracting all of the second row:
a[2,]

# changing all of the first column:
a[,1] <- 29
a
@

That is all for now. If you want to learn more, check the help for this function, using:
<<eval=FALSE>>=
?matrix
@

\subsection{Data-frame}
Data-frames are similar to matrices, but are much more flexible: they can store different data types and their elements can be accessed in more efficient ways.

\textbf{R is probably most efficient and user-friendly when analyses rely on data-frames.}


<<>>=
plant_data <- data.frame(plant = c("potatoes", "water hemlock", "carrot"),
                         number= c(3,5,39), danger= c(FALSE,TRUE,FALSE))

plant_data
@

You can access and modify elements in the same way as for matrices:
<<>>=
plant_data[3,2]
plant_data[3,]
@

But you can also use column names, which are more human-friendly than numbers:
<<>>=
plant_data[1,"plant"]

plant_data[,"danger"]
@

In some case it is easier to work with a different syntax using the dollar sign. Below, we access the same elements using this alternative syntax:

<<>>=
plant_data$plant[1]

plant_data$danger
@

\section{Loops and if statements}
Loops allow you to 

\subsection{for loops}

\subsection{if statements}


\section{Simple Graphics}

You can create graphics with various functions, the most fundamental one being \texttt{plot()}.
For instance:

<<plot1, fig.height=4, fig.width=6>>=
plot(x = c(1,2,3,4), y=c(0,0.2,0.4,0.5))
@

(the graph should appear when you run this line)


That's rather ugly, and we will learn how to make beautiful graphes in efficient ways. For now, let's just tweak a few things to demonstrate the use of options within the plot function:

<<plot2, fig.height=4, fig.width=6>>=
plot(x = c(1,2,3,4), y=c(0,0.2,0.4,0.5), type = "b",
     main = "Important result", xlab = "Cause", 
     ylab = "Consequence", xlim = c(0,4), col="red")
@

\begin{mdframed}
\textbf{Small exercise}\\
Modify the code above to obtain a graph with a y-axis that goes up to 1 (maybe what we are measuring on the y-axis is a proportion, so it seem fair to show the axis from 0 to 1), with the data being represented by a line only (without the dots), plotted in blue instead of red.

\end{mdframed}

\end{document}