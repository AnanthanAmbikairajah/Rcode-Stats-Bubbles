\documentclass[10pt]{beamer}%
\usetheme{Boadilla}
\usecolortheme{seahorse}

\usepackage[utf8]{inputenc}%

% graphics
%% Figures %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\usepackage{graphicx}
\usepackage{xcolor}%for color mixing

\usepackage{amsmath}%
\usepackage{amsfonts}%
\usepackage{amssymb}%
\usepackage{graphicx}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%% Doc info %%%%%%%%%%%%%%%%%%%
\title[\textbf{Intro to R}]{Introduction to R}
\date{\today}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{document}

<<Plot Options, echo=FALSE, message=FALSE>>=
#load(file = ".RData")
opts_knit$set(width=60)
opts_chunk$set(comment=NA, fig.width=8, fig.height=6, out.width='0.8\\textwidth',
               out.height='0.6\\textwidth',background='#D7DDEB')


szgr <- 2
szax <- 1.3
marr <- c(4, 4, 1, 1) + 0.1
setPar<-function(){
par(las=1,mar=marr, cex=szgr, cex.lab=szax , cex.axis=szax, lwd=2 ,pch=1, las=1)
}
setPar()
@

\begin{frame}
\maketitle	
\end{frame}
%%%%%%%%%%%

\begin{frame}{R and RStudio}
  \begin{center}
    \includegraphics[width=0.8\textwidth]{Figures/rstudiolayout}
  \end{center}
\end{frame}
%%%%%%%%%%%

\begin{frame}{What R can do}

  \pause \begin{exampleblock}{Everything.$^{1,2}$}

  {\tiny $1$ Except think about your science}\\
  {\tiny $2$ Occasionally in a non efficient way}
  \end{exampleblock}

  \pause \begin{block}{What about RStudio?}
  \begin{itemize}
    \item Makes your life easier
    \item Many handy tricks
      \begin{itemize}
        \item Autocomplete suggestion
        \item Ctrl-Enter to send command to R
        \item str() and View() objects in Environment
        \item Files, packages, help selectors
        \item Version control\dots
      \end{itemize}
    \end{itemize}
  \end{block}
  
\end{frame}
%%%%%%%%%%%



\AtBeginSection[]
{
  \begin{frame}<beamer>
    \frametitle{}
    \tableofcontents[currentsection,hideothersubsections,subsectionstyle=hide]% down vote\tableofcontents[currentsection,currentsubsection,hideothersubsections,sectionstyle=show/hide,subsectionstyle=show/shaded/hide]
  \end{frame}
}

\section{About R-studio projects}

\begin{frame}{About R-studio projects}
Use them
\end{frame}
%%%%%%%%%%%%

\section{The mean}

\begin{frame}[fragile]{Calculating a mean: Arithmetic and assignment}

<<>>=
  (2 + 3 + 5 + 1) / 4
@
\pause
<<>>=
  a <- 2
  b <- 3
  c <- 5
  d <- 1

  (a + b + c + d) / 4
@
\pause
<<>>=
  a <- 45
  (a + b + c + d) / 4
@
\end{frame}
%%%%%%%%%%%

\begin{frame}[fragile]{Calculating a mean: using vectors}

<<>>=
  c(2,3,5,1) # c is for concatenate
@
\pause
<<>>=
 mydata <- c(2,3,5,1) # save the vector
@
\pause
<<>>=
  mydata <- (2,3,5,1) # c is missing => error!
@
\end{frame}



%%%%%%%%%%%

  \begin{frame}[fragile]{Why bother with vectors?}
  Substitution:
  <<>>=
    mydata[2] <- 4
    mydata
  @

  Vectorized operations:
  <<>>=
    mydata*5 + 2
    @
\end{frame}
%%%%%%%%%%%

\begin{frame}[fragile]{Exercise}

<<>>=
  -5:20
@

\end{frame}
%%%%%%%%%%%


\begin{frame}[fragile]{Calculating a mean: using functions}%shortcut

  How to use a function?
  <<>>=
    ?mean
  @

  Or use \textbf{tab}
\pause

  <<>>=
  mean(c(2,4,5,1))
  mean(mydata)

  mean(x = mydata)
  @


\end{frame}
%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Data-frames}

\begin{frame}[fragile]{Loading data}

  <<>>=
    trees <- read.csv("trees.csv")
  @
  \pause

  <<>>=
  str(trees)
  @

  Try also \texttt{summary}, \texttt{class}, \texttt{head}, \texttt{tail}
\end{frame}
%%%%%%%%%%%

\begin{frame}[fragile]{Access}

  \begin{block}{Bracket-syntax}
    \begin{itemize}
      \item Row: dataframe[row, ]
      \item Column: dataframe[ , column]
      \item Element: dataframe[row, column]
    \end{itemize}
  \end{block}

  \pause
  <<eval=FALSE>>=
  trees[,1]
  trees[1:8,]
  trees[c(2,1,2), 3]
  trees[, "Height"]
  @

  \begin{block}{Dollar-syntax}
    \begin{itemize}
      \item Column \verb+ dataframe$column_name +
      \item Element \verb+ dataframe$column_name[row] +
    \end{itemize}
  \end{block}

  <<eval=FALSE>>=
    trees$Height
  @
\end{frame}
%%%%%%%%%%%

\begin{frame}{Time to think a tiny bit!}

  \textbf{Calculate the mean for all three variables in trees,\\ excluding the last (31st) record.}

\end{frame}
%%%%%%%%%%%

\begin{frame}[fragile]{Solution for one column}

  \textbf{Calculate the mean for all three variables in trees,\\ excluding the last (31st) record.}

  <<eval=FALSE>>=
    mean(trees$Girth[1:30])
    mean(trees[1:30, "Girth"])
    mean(trees$Girth[-31])
    mean(trees[-31, "Girth"])
  @
\end{frame}
%%%%%%%%%%%
\begin{frame}[fragile]{How to get the row means?}
  <<eval=FALSE>>=
  mean(trees[1,])
  mean(trees[2,])
  mean(trees[...,])
  @
  \pause
  \begin{center}:
    \includegraphics[width=0.4\textwidth]{Figures/ineff}
  \end{center}
\end{frame}
%%%%%%%%%%%

\section{For-loop}

\begin{frame}[fragile]{How to get the row means? For-loops}

  <<eval = FALSE>>=
    for (i in 1:N)
    {
      something as a function of i
    }#end of the loop
  @

  \pause
  <<eval = FALSE>>=
    for (i in 1:31)
    {
      print(i)
    }
  @

\end{frame}
%%%%%%%%%%%

\begin{frame}[fragile]{How to get the row means? For-loops}

Start by buiding the code for 1 iteration (1 "i" value, e.g., 22):

    <<eval = FALSE>>=
    mean(as.numeric(trees[22,]))
  @

\pause 
We will want to store the result somewhere:
  
    <<eval = FALSE>>=
  ResultMean <- vector() # we will store the results there
  ResultMean[22] <- mean(as.numeric(trees[22,]))
  @
  
  \pause
  
Now change 22 to "i" and write a loop around:
    <<eval = FALSE>>=
    ResultMean <- vector() # we will store the results there
    for (i in 1:31)
    {
      ResultMean[i] <- mean(as.numeric(trees[i,]))
    }
  @

\end{frame}
%%%%%%%%%%%

\begin{frame}[fragile]{For-loops: your turn!}

Load rock data
  <<>>=
  rock <- read.csv("rock.csv")
  @

  \centering
\textbf{\large Use a for loop to obtain column averages}

\end{frame}
%%%%%%%%%%%


\begin{frame}[fragile]{Solution}

Load rock data.
  <<>>=
  rock <- read.csv("rock.csv")
  @

  \centering
\textbf{\large Use a for loop to obtain column averages}

  <<eval=FALSE>>=
    storage <- vector(length = ncol(rock))
    for (i in 1:ncol(rock))
    {
      storage[i] <- mean(rock[,i])
    }
  @
\end{frame}
%%%%%%%%%%%
\begin{frame}[fragile]{More concise alternative: apply functions}

  <<eval=FALSE>>=
  apply(X = dataframe, MARGIN = 1 (row) or 2 (col), FUN = function)
  @

  \pause

  <<eval=FALSE>>=
  apply(X = rock, MARGIN = 1, FUN = mean)#by row (not meaningful)
  apply(X = rock, MARGIN = 2, FUN = mean)#by column
  @
\end{frame}
%%%%%%%%%%%
\begin{frame}[fragile]{Even better (worse)...}

  <<eval=FALSE>>=
    colMeans(rock)
    rowMeans(rock)
  @

  \pause

  \begin{alertblock}{Trade-off concision  / flexibility}
    \begin{itemize}
      \item colMeans shortest, but does only means
      \item apply very flexible, but does only array/matrix/data-frame
      \item for-loop looks complex, but infinitely flexible
      \item (NB: your computer does a for-loop whether you see it or not)
    \end{itemize}
  \end{alertblock}

\end{frame}
%%%%%%%%%%%

\begin{frame}[fragile]{The last value}

Sometimes a function takes very long to run\\
<<eval=FALSE>>=
    rowMeans(rock[rep(1:nrow(rock),100000),])
@
\pause
What if you forgot to save the output to an object??

\pause 

<<>>=
ourlasthope <- .Last.value
@

\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{While-loop}

\begin{frame}[fragile]{While-loop: idea}
Less common than for-loops\\
Stop the loop after a condition is met\\

<<eval=FALSE>>=
    while(condition TRUE)
    {
      something
    }
  @
  
\end{frame}
%%%%%%%%%%%

\begin{frame}[fragile]{What is the smallest reproductive rate necessary to obtain a growing population?}
<<message=FALSE>>=
library(popbio)
mat <- matrix(c(0,0.8,1,0), nrow = 2)
lambda(mat)
cond <- 1
while(lambda(mat) < 1 )
{
  mat[1,2] <- mat[1,2]+0.001
}
mat[1,2] 
@

\end{frame}
%%%%%%%%%%%

\begin{frame}[fragile]{But think twice before running a while loop\dots}
  
What happens if you run:
<<eval=FALSE>>=
x <- 1
while(x>0)
{
  x <- x + 1
}
@

\end{frame}
%%%%%%%%%%%

\begin{frame}[fragile]{Looking for a rare event}

The function sample() takes 5 number between 1 and 6 (like 5 dice!):
<<>>=
x <- sample(x = 1:6, size = 5, replace = TRUE)
@

Are all die equal?
<<>>=
all(x == x[1])
@

Are they ever going to be equal?
Write a while loop to find a case
<<eval=FALSE, echo=FALSE>>=
condition <- TRUE
howlong <- 0
while(condition)
{
  x <- sample(x = 1:6, size = 5, replace = TRUE)
  condition <- !all(x == x[1])
  howlong <- howlong + 1
}
howlong
x
@

\end{frame}
%%%%%%%%%%%%

\section{If-else statements}

\begin{frame}[fragile]{If-else statements}

<<eval=FALSE>>=
if(condition)
{
  do something
}
@


<<eval=FALSE>>=
if(condition)
{
  do something
}else{
  do something else
}
@

\end{frame}
%%%%%%%%%%%%

\begin{frame}[fragile]{If-else statements}

For instance:
<<eval=FALSE>>=
for (i in 1:10)
{
  if(i < 6)
  {
    print("tofu")
  }else{
    print("bacon")
  }
}

@
\end{frame}
%%%%%%%%%%%


\section{Visualisation}

\begin{frame}[fragile]{plot function}

<<plorock>>=
plot(rock)
@

\end{frame}
%%%%%%%%%%%

\begin{frame}[fragile]{plot function}

<<plorock2>>=
plot(rock$peri)
@

\end{frame}
%%%%%%%%%%%

\begin{frame}[fragile]{plot function}

<<plorock3>>=
plot(x = rock$peri, y = rock$area)
@

\end{frame}
%%%%%%%%%%%

\begin{frame}[fragile]{plot function}

<<plorock4>>=
plot(x = rock$peri, y = rock$area, main = "Eureka!",
     xlab = "Perimeter", ylab = "area", col="blue", pch=2)
@
\end{frame}
%%%%%%%%%%%

\begin{frame}[fragile]{plot function: back to the mean}
  <<>>=
  data("iris")
  @
\end{frame}
%%%%%%%%%%%

\begin{frame}[fragile]{plot function: back to the mean}
<<iris1>>=
plot(iris$Sepal.Length, col=iris$Species)
@
\end{frame}
%%%%%%%%%%%

\begin{frame}[fragile]{boxplots}
  <<plorock5>>=
  boxplot(iris$Sepal.Length ~ iris$Species)
  #or plot(iris$Sepal.Length ~ iris$Species)
@

\end{frame}
%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{T-test}

\begin{frame}[fragile]{Student's T.test introduction}% presenting the test, the output...
  <<>>=
  ?t.test
  @

  \pause
  <<>>=
  t.test(1:10, y = c(7:20))
  @

\end{frame}
%%%%%%%%%%%

\begin{frame}[fragile]{T.test introduction}% presenting the test, the output...

  <<>>=
    boxplot(c(1:10, 7:20) ~ c(rep(1,10), rep(2, 14)))
  @
\end{frame}
%%%%%%%%%%%

\begin{frame}[fragile]{Are irises different?}

  \textbf{Use t-tests to compare species in the iris dataset}

  \begin{center}
    \includegraphics[height=0.6\textwidth]{Figures/iris}
  \end{center}
\end{frame}
%%%%%%%%%%%

\begin{frame}[fragile]{Are irises different? Solution}

  \textbf{Use t-tests to compare species in the iris dataset}

  Sorry, I was mean and forgot to tell about subsetting, which you needed here.\\
  Subset to the species \textit{setosa}:
  <<eval=FALSE>>=
    iris[iris$Species == "setosa", ]
  @

  One t-test for sepal length between \textit{setosa} and \textit{versicolor}:
  <<eval=FALSE>>=
    t.test(x = iris$Sepal.Length[iris$Species == "setosa"],
          y = iris$Sepal.Length[iris$Species == "versicolor"])
  @


\end{frame}
%%%%%%%%%%%

\end{document}
