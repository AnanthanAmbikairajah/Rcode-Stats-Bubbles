\documentclass[12pt,a4paper]{scrartcl}
\usepackage[utf8]{inputenc}
\usepackage{amsmath}
\usepackage{graphicx}
\usepackage{tikz}
%\usepackage{silence}
\usepackage{mdframed}
%\WarningFilter{mdframed}{You got a bad break}
\usepackage[colorinlistoftodos]{todonotes}
\usepackage{listings}
\usepackage{color}
\colorlet{exampcol}{blue!10}
\usepackage{multicol}
\usepackage{booktabs}

\usepackage[autostyle, english = american]{csquotes}
\MakeOuterQuote{"}

\usepackage{hyperref}
\hypersetup{
    colorlinks,
    citecolor=black,
    filecolor=black,
    linkcolor=blue,
    urlcolor=black
}

\title{A minimalist introduction to R}
\date{\today}
\author{Timoth\'ee Bonnet}


\begin{document}


\maketitle

\tableofcontents

\section{Math operators}

\subsection{What you need to know}
Below we demonstrate the use of some basic mathematical operators:
<<mathope>>=
1+3 #addition
5-2 #substraction
6*4 #multiplication
14/2 #division
2^3 #exponent
2**3 #other version for exponent
@

There are many mathematical functions already present in R:
<<mathfun>>=
exp(3) #exponential
log(2.71) #logarithm
sqrt(9) #square root
9 ^ (1/2) # other version for square root

#trigonometric functions :
#(use ";" for several expressions on the same line)
sin(pi/2); cos(1); tan(pi/3)
@

\subsection{Practice}

Use R to compute:
$$
  y = (\cos (0.1\pi))^3
$$
You should get \Sexpr{cos(0.1*pi) ^ 3}

And:
$$
  y = \log (3-2) + 5
$$
You should get \Sexpr{log(3-2) +5}

And if you dare:
$$
  y = \frac{1}{2\sqrt{2\pi}} e^{(\frac{3-\pi}{2})^2}
$$

You should get \Sexpr{(1/(2*sqrt(2*pi))) * exp(((3-pi)/2)^2)}

\section{Logical operators}

\subsection{What you need to know}

Logical operators are very important for programming and scripting.
You can test whether two things are equal with double = signs:
<<logop>>=
3 == 6/2 #is 3 equal to 6/2? TRUE!
3 == pi  # FALSE!
@

You can also test if they are NOT equal with the operator \texttt{!=}:
<<>>=
2 != 3
2 != 2
@

The \texttt{!} symbol means "not" in general, so you can use it to get the opposite result:
<<>>=
!TRUE
!FALSE
@

The AND operator is \texttt{\&}
<<>>=
2 == 2 & 3==3
2 ==2 & 3==2
@

The OR operator is \texttt{\textbar}
<<>>=
2 == 2 | 3==2
2 == 4 | 3==2
@


\subsection{Practice}

Try and guess the result of these logical tests before running them:

<<eval=FALSE>>=
! 1==2
(1!=2 | 3==4) & (2==4/2)
"abc" != "bc"
@

\section{Assignment}
\subsection{What you need to know}

Values can be assigned to objects to store them and make your code flexible. You assign a value to an object using the operator \verb+ <- + (or \verb+ = +, but be careful not to confuse this with the \verb+ == + used in tests).

<<>>=
#You can use objects in calculation
a <- 12
a + 2

# you can assign an object value to another object
b <- a
c <- a*b

# you can re-assign an object
a <- "c"
b <- "c"
a == b
c <- a == "b"
c
@

\section{Containers}

\subsection{Vectors}
The simplest container is a vector.
A flexible way to create a vector by \textit{concatenating} several values with the syntax \verb+ c(x,y,...)+.
 
<<>>=
a <- c(3,9,3,5) # c is for concatenate
a
@

You can now do calculations on your vector:

<<>>=
a * 2
@

You can access one or several elements in the vector using squared brackets
<<>>=
#access one value
a[1]
a[2]

#access multiple values by concatenating locations
a[c(1,3)]

#access mutiple successive values
a[2:4]#the syntax x:y means "all integers between x and y"

#modify a value
a[3] <- -5
a

#modify mutiple values
a[1:2] <- 1
a
@

Some useful ways to create vectors:
<<>>=
#successive integers:
1:10

#arbitrary sequence:
seq(from=-0.2, to = 0.5, by=0.03)

#random numbers:
runif(n = 4, min = 1, max = 5)
@

\subsection{Practice}

\textbf{Create a vector of 100 random numbers between -1 and 1. Then subsitute all values below -0.5 by 0.}

\textbf{Create a sequence of number between 0 and 10. Find a way to repeat the sequence 50 times and save the result to a vector.}

\section{For-loop}

\subsection{What you need to know}

A for loop follows the basic structure:
  <<eval = FALSE>>=
    for (i in 1:N)
    {
      something as a function of i0
    }#end of the loop
  @

1:N means all the integer values between 1 and 10.

Instead of "i" you can write anything

For instance:
  <<eval = TRUE>>=
    for (i in 1:10)
    {
      print(i)
    }
  @

\subsection{Practice}

\subsubsection{Calculate averages}
Load rock data
  <<>>=
  rock <- read.csv("rock.csv")
  @


\textbf{\large Use a for loop to obtain column averages}

\subsubsection{Matrix operations}

We create two random matrices:
<<>>=
Mat1 <- matrix(rnorm(9), nrow = 3)
Mat2 <- matrix(rnorm(9), nrow = 3)
@

We would like to add these two matrices to create third matrix. We initialize it with empty values:
<<>>=
MatAdd <- matrix(NA, nrow = 3, ncol = 3)
@

\textbf{Write a for-loop to fill the cells following $MatAdd_{ij}= Mat1_{ij}+Mat2_{ij}$.}

\textbf{Do the same with two nested for-loops!}


Now, we would like to multiply the two matrices.
The inner product of matrices $V$ and $U$ to create matrix $W$ is defined by $w_{ij} = \sum_{k=1}^{k=m} v_ik * u_kj $

For instance, the first cell is calculated as:
<<>>=
Mat1[1,1]*Mat2[1,1]+Mat1[1,2]*Mat2[2,1]+Mat1[1,3]*Mat2[3,1]
@

\textbf{Write nested for-loops to calculate the matrix $W$.}


NB: you can check the result by using the R command \verb+%*%+:
<<eval=FALSE>>=
Mat1 %*% Mat2
@

\section{While-loop}

\subsection{What you need to know}
<<eval=FALSE>>=
    while(condition TRUE)
    {
      something
    }
  @
  
For instance:
<<eval=TRUE>>=
x <- 0
while(x<10)
    {
      x <- x+1
      print(x)
    }
  @
  
  
\subsection{Practice}

The function sample() takes 5 number between 1 and 6 (like 5 dice!):
<<>>=
x <- sample(x = 1:6, size = 5, replace = TRUE)
@

Are all die equal?
<<>>=
all(x == x[1])
@

Are they ever going to be equal?

\textbf{Write a while loop to find a case with all die equal}

\textbf{How many attempts does it take}

\textbf{Write a for while loop within a for loop to estimate how long it take on average.}


\section{If-else statement}

\subsection{What you need to know}

<<eval=FALSE>>=
if(condition)
{
  do something
}
@


<<eval=FALSE>>=
if(condition)
{
  do something
}else{
  do something else
}
@


For instance:
<<>>=
for (i in 1:10)
{
  if(i < 6)
  {
    print("tofu")
  }else{
    print("bacon")
  }
}

@

\subsection{Practice}

We can draw 100 random number following a random distribution of mean 0 and variance one with:
<<>>=
x <- rnorm(n = 100, mean = 0, sd = 1)
@

If we take their logarithm we obtain many "NaN" (Not A Number), because the log of a negative number is undefined:
<<>>=
log(x)
@

Let's say we want 0 instead of NaN.

\textbf{Use a for loop and an if-else statement to do that.}

\textbf{More difficult: Use a for loop and a while loop to re-draw random numbers until they are all positive.}

\end{document}
